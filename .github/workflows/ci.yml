name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install black flake8 isort mypy
    
    - name: Check code formatting with Black
      run: black --check .
    
    - name: Check import sorting with isort
      run: isort --check-only .
    
    - name: Lint with flake8
      run: |
        # Stop build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all other issues as warnings
        flake8 . --count --max-complexity=10 --max-line-length=120 --statistics
    
    - name: Type check with mypy
      run: mypy --install-types --non-interactive --ignore-missing-imports .
      continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install safety
      run: pip install safety
    
    - name: Check for vulnerabilities
      run: safety check --file requirements.txt --json
      continue-on-error: true
    
    - name: Scan for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
    
    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
    
    - name: Download spaCy model
      run: python -m spacy download en_core_web_sm
    
    - name: Download NLTK data
      run: |
        python -c "import nltk; nltk.download('punkt')"
        python -c "import nltk; nltk.download('stopwords')"
        python -c "import nltk; nltk.download('wordnet')"
    
    - name: Run tests
      run: pytest tests/ -v --cov=. --cov-report=xml --cov-report=term
      env:
        SERPAPI_API_KEY: ${{ secrets.SERPAPI_API_KEY_TEST }}
        DATABASE_URL: sqlite:///./test.db
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}

  smoke-test:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        python -m spacy download en_core_web_sm
    
    - name: Initialize database
      run: python cli.py init
    
    - name: Test CLI help
      run: |
        python cli.py --help
        python cli.py create --help
        python cli.py export --help
    
    - name: Test providers (mock mode)
      run: python -m pytest tests/smoke/ -v -k provider
      env:
        OFFLINE_MODE: true

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build tools
      run: |
        pip install --upgrade pip
        pip install build wheel setuptools
    
    - name: Build package
      run: python -m build
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: keyword-research:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm keyword-research:latest python cli.py --help

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install documentation tools
      run: |
        pip install sphinx sphinx-rtd-theme
    
    - name: Check documentation
      run: |
        # Verify all markdown files are valid
        for file in *.md docs/*.md; do
          if [ -f "$file" ]; then
            echo "Checking $file"
            python -c "import markdown; markdown.markdown(open('$file').read())" || exit 1
          fi
        done
    
    - name: Count documentation words
      run: |
        echo "Documentation word count:"
        wc -w README.md QUICKSTART.md ARCHITECTURE.md EXAMPLES.md PROJECT_SUMMARY.md EXPORT.md SECURITY.md

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: keyword_research_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-integration
        python -m spacy download en_core_web_sm
    
    - name: Run integration tests
      run: pytest tests/integration/ -v
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/keyword_research_test
        REDIS_URL: redis://localhost:6379/0
        SERPAPI_API_KEY: ${{ secrets.SERPAPI_API_KEY_TEST }}

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, test, smoke-test, build, docker]
    if: always()
    
    steps:
    - name: Send notification
      run: |
        echo "CI/CD Pipeline completed"
        echo "Status: ${{ job.status }}"
        # Add Slack/Discord webhook here if needed

# Performance benchmarks (optional)
# Uncomment to enable performance tracking
#  benchmark:
#    name: Performance Benchmarks
#    runs-on: ubuntu-latest
#    needs: test
#    
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
#    
#    - name: Set up Python
#      uses: actions/setup-python@v4
#      with:
#        python-version: ${{ env.PYTHON_VERSION }}
#    
#    - name: Install dependencies
#      run: |
#        pip install --upgrade pip
#        pip install -r requirements.txt
#        pip install pytest-benchmark
#    
#    - name: Run benchmarks
#      run: pytest tests/benchmarks/ --benchmark-only --benchmark-json=benchmark.json
#    
#    - name: Store benchmark result
#      uses: benchmark-action/github-action-benchmark@v1
#      with:
#        tool: 'pytest'
#        output-file-path: benchmark.json
#        github-token: ${{ secrets.GITHUB_TOKEN }}
#        auto-push: true
